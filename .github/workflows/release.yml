name: Release Build

on: workflow_dispatch
permissions: write-all

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true

      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm check ${{ matrix.target }}

      - name: Tauri Build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'NVM Desktop v__VERSION__'
          releaseBody: 'More new features are now supported.'
          tauriScript: pnpm
          args: --target ${{ matrix.target }}

  # release-for-linux-x64:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           target: x86_64-unknown-linux-gnu
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Build for Linux
  #       uses: ./.github/build-for-linux-x64
  #       env:
  #         NODE_OPTIONS: '--max_old_space_size=4096'
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #       with:
  #         target: ${{ matrix.target }}

  #     - name: Get Version
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install jq
  #         echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV

  #     - name: Upload Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: v${{env.VERSION}}
  #         name: 'NVM Desktop v${{env.VERSION}}'
  #         body: 'More new features are now supported.'
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         files: |
  #           src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
  #           src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

  release-for-linux-arm64:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm check ${{ matrix.target }}

      - name: 'Setup for linux'
        run: |-
          sudo ls -lR /etc/apt/
          echo -------------
          # sudo sed 's/mirror+file:\/etc\/apt\/apt-mirrors.txt/[arch-=amd64,i386] http:\/\/ports.ubuntu.com\/ubuntu-ports\//g' /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
          # echo -------------
          # sudo sed -i 's/mirror+file:\/etc\/apt\/apt-mirrors.txt/[arch=amd64,i386] http:\/\/archive.ubuntu.com\/ubuntu\//g' /etc/apt/sources.list
          cat > /tmp/sources.list << EOF
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-security main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-updates main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-backports main multiverse universe restricted

          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy main multiverse universe restricted
          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy-security main multiverse universe restricted
          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy-updates main multiverse universe restricted
          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy-backports main multiverse universe restricted
          EOF
          sudo mv /etc/apt/sources.list /etc/apt/sources.list.default
          sudo mv /tmp/sources.list /etc/apt/sources.list

          echo -------------
          echo /etc/apt/sources.list && cat /etc/apt/sources.list
          echo -------------
          echo /etc/apt/apt-mirrors.txt && cat /etc/apt/apt-mirrors.txt
          echo -------------
          echo /etc/apt/sources.list.d/ports.list && cat /etc/apt/sources.list.d/ports.list || true
          echo -------------

          sudo dpkg --add-architecture arm64
          sudo apt update

          sudo apt install -y \
            gcc-multilib \
            g++-multilib

          echo -------------
          echo install arm64 dependences ...

          sudo apt install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            libgtk-3-dev \
            patchelf:arm64 \
            libwebkit2gtk-4.1-dev:arm64 \
            libappindicator3-dev:arm64 \
            libssl-dev:arm64 \
            libgtk-3-dev:arm64 \
            librsvg2-dev:arm64

          echo 'ok'

      - name: Build for Linux
        run: |
          echo "build native binarys..."

          rustup target add aarch64-unknown-linux-gnu
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
          export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/
          export PKG_CONFIG_ALLOW_CROSS=1
          pnpm build --target aarch64-unknown-linux-gnu

          echo "build native binarys finished"
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Get Version
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{env.VERSION}}
          name: 'NVM Desktop v${{env.VERSION}}'
          body: 'More new features are now supported.'
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

  update_release_notes:
    name: Update release notes
    runs-on: ubuntu-latest
    needs: [release, release-for-linux-arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Env
        run: |
          echo "BUILDTIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV
        shell: bash

      - name: Get Version
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV

      - name: Update Tag
        uses: richardsimko/update-tag@v1
        with:
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          cat > release.txt << 'EOF'
          ## 我应该下载哪个版本？

          ### MacOS (提示文件损坏或开发者无法验证请查看下面FAQ)
          - MacOS intel芯片: x64.dmg
          - MacOS apple M芯片: aarch64.dmg

          ### Linux
          - Linux 64位: amd64.deb/amd64.rpm
          - Linux arm64架构: arm64.deb/aarch64.rpm

          ### Windows (Win7 用户请查看下面FAQ中的解决方案)
          #### 正常版本(推荐)
          - 64位: x64-setup.exe
          - arm64架构: arm64-setup.exe
          #### 内置Webview2版(体积较大，仅在企业版系统或Win7无法安装webview2时使用)
          - 64位: x64_fixed_webview2-setup.exe
          - 32位: x86_fixed_webview2-setup.exe
          - arm64架构: arm64_fixed_webview2-setup.exe

          Created at  ${{ env.BUILDTIME }}.
          EOF

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: 'NVM Desktop v${{env.VERSION}}'
          body_path: release.txt
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

  # release-update:
  #   runs-on: ubuntu-latest
  #   needs: [release]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         run_install: false

  #     - name: Pnpm install
  #       run: pnpm i

  #     - name: Release updater file
  #       run: pnpm updater
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
